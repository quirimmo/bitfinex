// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Routes Component should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AppRoutes />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "basename": "/",
      "children": <React.Fragment>
        <AppNavigation />
        <RouteWrapper
          atActive={
            Object {
              "left": 0,
              "opacity": 1,
            }
          }
          atEnter={
            Object {
              "left": -500,
              "opacity": 0,
            }
          }
          atLeave={
            Object {
              "left": 2500,
              "opacity": 0,
            }
          }
          className="switch-wrapper"
        >
          <Route
            component={[Function]}
            exact={true}
            path="/"
          />
          <Route
            component={[Function]}
            exact={true}
            path="/test"
          />
          <Redirect
            from="*"
            push={false}
            to="/"
          />
        </RouteWrapper>
      </React.Fragment>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <AppNavigation />,
          <RouteWrapper
            atActive={
              Object {
                "left": 0,
                "opacity": 1,
              }
            }
            atEnter={
              Object {
                "left": -500,
                "opacity": 0,
              }
            }
            atLeave={
              Object {
                "left": 2500,
                "opacity": 0,
              }
            }
            className="switch-wrapper"
          >
            <Route
              component={[Function]}
              exact={true}
              path="/"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/test"
            />
            <Redirect
              from="*"
              push={false}
              to="/"
            />
          </RouteWrapper>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "atActive": Object {
              "left": 0,
              "opacity": 1,
            },
            "atEnter": Object {
              "left": -500,
              "opacity": 0,
            },
            "atLeave": Object {
              "left": 2500,
              "opacity": 0,
            },
            "children": Array [
              <Route
                component={[Function]}
                exact={true}
                path="/"
              />,
              <Route
                component={[Function]}
                exact={true}
                path="/test"
              />,
              <Redirect
                from="*"
                push={false}
                to="/"
              />,
            ],
            "className": "switch-wrapper",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/test",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "from": "*",
                "push": false,
                "to": "/",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "basename": "/",
        "children": <React.Fragment>
          <AppNavigation />
          <RouteWrapper
            atActive={
              Object {
                "left": 0,
                "opacity": 1,
              }
            }
            atEnter={
              Object {
                "left": -500,
                "opacity": 0,
              }
            }
            atLeave={
              Object {
                "left": 2500,
                "opacity": 0,
              }
            }
            className="switch-wrapper"
          >
            <Route
              component={[Function]}
              exact={true}
              path="/"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/test"
            />
            <Redirect
              from="*"
              push={false}
              to="/"
            />
          </RouteWrapper>
        </React.Fragment>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <AppNavigation />,
            <RouteWrapper
              atActive={
                Object {
                  "left": 0,
                  "opacity": 1,
                }
              }
              atEnter={
                Object {
                  "left": -500,
                  "opacity": 0,
                }
              }
              atLeave={
                Object {
                  "left": 2500,
                  "opacity": 0,
                }
              }
              className="switch-wrapper"
            >
              <Route
                component={[Function]}
                exact={true}
                path="/"
              />
              <Route
                component={[Function]}
                exact={true}
                path="/test"
              />
              <Redirect
                from="*"
                push={false}
                to="/"
              />
            </RouteWrapper>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "atActive": Object {
                "left": 0,
                "opacity": 1,
              },
              "atEnter": Object {
                "left": -500,
                "opacity": 0,
              },
              "atLeave": Object {
                "left": 2500,
                "opacity": 0,
              },
              "children": Array [
                <Route
                  component={[Function]}
                  exact={true}
                  path="/"
                />,
                <Route
                  component={[Function]}
                  exact={true}
                  path="/test"
                />,
                <Redirect
                  from="*"
                  push={false}
                  to="/"
                />,
              ],
              "className": "switch-wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "exact": true,
                  "path": "/",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "exact": true,
                  "path": "/test",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "from": "*",
                  "push": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
